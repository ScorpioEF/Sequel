/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ThingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAllThingsQuery(): Promise<OperationResultOfThingOf> {
        let url_ = this.baseUrl + "/api/Thing/GetAllThingsQuery";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllThingsQuery(_response);
        });
    }

    protected processGetAllThingsQuery(response: Response): Promise<OperationResultOfThingOf> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultOfThingOf.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfThingOf>(<any>null);
    }
}

export class CreateThingWithOtherStuffsCommandClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    canExecute(args: CreateThingWithOtherStuffsCommandArgs): Promise<ValidationResult> {
        let url_ = this.baseUrl + "/api/Thing/CreateThingWithOtherStuffsCommand/CanExecute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(args);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCanExecute(_response);
        });
    }

    protected processCanExecute(response: Response): Promise<ValidationResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValidationResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidationResult>(<any>null);
    }

    execute(args: CreateThingWithOtherStuffsCommandArgs): Promise<OperationResultOfGuid> {
        let url_ = this.baseUrl + "/api/Thing/CreateThingWithOtherStuffsCommand/Execute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(args);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExecute(_response);
        });
    }

    protected processExecute(response: Response): Promise<OperationResultOfGuid> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResultOfGuid.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResultOfGuid>(<any>null);
    }
}

export class OperationResultOfThingOf implements IOperationResultOfThingOf {
    entity?: Thing[] | undefined;
    status?: OperationStatus;
    messages?: string[] | undefined;

    constructor(data?: IOperationResultOfThingOf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["entity"])) {
                this.entity = [] as any;
                for (let item of _data["entity"])
                    this.entity!.push(Thing.fromJS(item));
            }
            this.status = _data["status"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(item);
            }
        }
    }

    static fromJS(data: any): OperationResultOfThingOf {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfThingOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.entity)) {
            data["entity"] = [];
            for (let item of this.entity)
                data["entity"].push(item.toJSON());
        }
        data["status"] = this.status;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data; 
    }
}

export interface IOperationResultOfThingOf {
    entity?: Thing[] | undefined;
    status?: OperationStatus;
    messages?: string[] | undefined;
}

export class Thing implements IThing {
    id?: string;
    name?: string | undefined;
    otherStuffs?: OtherStuff[] | undefined;

    constructor(data?: IThing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["otherStuffs"])) {
                this.otherStuffs = [] as any;
                for (let item of _data["otherStuffs"])
                    this.otherStuffs!.push(OtherStuff.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Thing {
        data = typeof data === 'object' ? data : {};
        let result = new Thing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.otherStuffs)) {
            data["otherStuffs"] = [];
            for (let item of this.otherStuffs)
                data["otherStuffs"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IThing {
    id?: string;
    name?: string | undefined;
    otherStuffs?: OtherStuff[] | undefined;
}

export class OtherStuff implements IOtherStuff {
    id?: string;
    thingId?: string;
    number?: number;

    constructor(data?: IOtherStuff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.thingId = _data["thingId"];
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): OtherStuff {
        data = typeof data === 'object' ? data : {};
        let result = new OtherStuff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thingId"] = this.thingId;
        data["number"] = this.number;
        return data; 
    }
}

export interface IOtherStuff {
    id?: string;
    thingId?: string;
    number?: number;
}

/** 0 = None 1 = Success 2 = EntityNotFound 3 = EntityCreated 4 = InvalidArguments 5 = Error */
export enum OperationStatus {
    None = 0,
    Success = 1,
    EntityNotFound = 2,
    EntityCreated = 3,
    InvalidArguments = 4,
    Error = 5,
}

export class OperationResult implements IOperationResult {
    status?: OperationStatus;
    messages?: string[] | undefined;

    constructor(data?: IOperationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(item);
            }
        }
    }

    static fromJS(data: any): OperationResult {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data; 
    }
}

export interface IOperationResult {
    status?: OperationStatus;
    messages?: string[] | undefined;
}

export class ValidationResult extends OperationResult implements IValidationResult {

    constructor(data?: IValidationResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IValidationResult extends IOperationResult {
}

export class CreateThingWithOtherStuffsCommandArgs implements ICreateThingWithOtherStuffsCommandArgs {
    name?: string | undefined;
    otherStuffs?: CreateOtherStuffArgs[] | undefined;

    constructor(data?: ICreateThingWithOtherStuffsCommandArgs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["otherStuffs"])) {
                this.otherStuffs = [] as any;
                for (let item of _data["otherStuffs"])
                    this.otherStuffs!.push(CreateOtherStuffArgs.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateThingWithOtherStuffsCommandArgs {
        data = typeof data === 'object' ? data : {};
        let result = new CreateThingWithOtherStuffsCommandArgs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.otherStuffs)) {
            data["otherStuffs"] = [];
            for (let item of this.otherStuffs)
                data["otherStuffs"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateThingWithOtherStuffsCommandArgs {
    name?: string | undefined;
    otherStuffs?: CreateOtherStuffArgs[] | undefined;
}

export class CreateOtherStuffArgs implements ICreateOtherStuffArgs {
    number?: number;

    constructor(data?: ICreateOtherStuffArgs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
        }
    }

    static fromJS(data: any): CreateOtherStuffArgs {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOtherStuffArgs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        return data; 
    }
}

export interface ICreateOtherStuffArgs {
    number?: number;
}

export class OperationResultOfGuid implements IOperationResultOfGuid {
    entity?: string;
    status?: OperationStatus;
    messages?: string[] | undefined;

    constructor(data?: IOperationResultOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entity = _data["entity"];
            this.status = _data["status"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(item);
            }
        }
    }

    static fromJS(data: any): OperationResultOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResultOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entity"] = this.entity;
        data["status"] = this.status;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data; 
    }
}

export interface IOperationResultOfGuid {
    entity?: string;
    status?: OperationStatus;
    messages?: string[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}